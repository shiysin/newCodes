import java.lang.reflect.Field;
import java.lang.reflect.Method;

/**
 * 反射测试
 * @author ashiysin
 */
public class Reflection {


    public static void main(String[] args) {


        try {
            // 1 知道具体类
            Class<Person> clazz1 = Person.class;
            // 2 传入类的全路径
            Class<?> clazz2 =  Class.forName("com.yixiang.mes.core.model.po.Product");
            // 3 通过对象实例
            Person person1 = new Person();
            Class<? extends Person> clazz3 = person1.getClass();
            // 通过类加载器（不会进行初始化，意味着不进行包括初始化等一系列步骤，静态代码块和静态对象不会得到执行）
            Class<?> clazz4 = ClassLoader.getSystemClassLoader().loadClass("com.yixiang.mes.core.model.po.Product");


            // 1.获取Class对象
            Class<Person> personClass = Person.class;
            // 2.获取实例对象
            Person person =  personClass.newInstance();

            // 3.获取所有方法
            Method[] methods = personClass.getDeclaredMethods();
            for (Method method : methods) {
                System.out.println(method.getName());
            }
            // 4.调用方法
            Method getNameByRef = personClass.getDeclaredMethod("getNameByRef", String.class);
            getNameByRef.invoke(person, "zhangsan");

            // 5.获取所有参数
            Field[] fields = personClass.getDeclaredFields();
            for (Field field : fields) {
                System.out.println(field.getName());
            }
            // 6.获取指定参数
            Field nameField = personClass.getDeclaredField("name");
            // 为了对类中的参数进行修改我们取消安全检查
            nameField.setAccessible(true);
            nameField.set(person, "lisi");
            System.out.println(person.getName());

            // 7.获取私有方法
            Method getNameByRef2OfPrivate = personClass.getDeclaredMethod("getNameByRef2OfPrivate", String.class);
            getNameByRef2OfPrivate.setAccessible(true);
            getNameByRef2OfPrivate.invoke(person, "wangwu");

        } catch (InstantiationException e) {
            throw new RuntimeException(e);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
